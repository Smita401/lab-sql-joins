-- Challenge - Joining on multiple tables --

-- 1. List the number of films per category.
use sakila;
select name, category.category_id, count(*) from film_category
inner join film
	on film_category.film_id = film.film_id
inner join category
	on film_category.category_id = category.category_id
group by name, category_id;

-- 2. Retrieve the store ID, city, and country for each store.
select store.store_id, city.city, country.country
from store
inner join address
	on store.address_id = address.address_id
inner join city
	on address.city_id = city.city_id
inner join country
	on city.country_id = country.country_id;
    
-- 3. Calculate the total revenue generated by each store in dollars.
select store.store_id, sum(amount) as revenue_in_dollars
from payment
inner join staff
	on payment.staff_id = staff.staff_id
inner join store
	on staff.store_id = store.store_id
group by store_id;

-- 4. Determine the average running time of films for each category.
select name, category.category_id, round(avg(length), 2) as avg_running_time from film
inner join film_category
	on film_category.film_id = film.film_id
inner join category
	on film_category.category_id = category.category_id
group by name, category_id;



-- BONUS --

-- 5. Identify the film categories with the longest average running time.
select category.category_id, category.name as category_name,
round(avg(film.length), 2) as avg_running_time
from film
inner join film_category 
	on film_category.film_id = film.film_id
inner join category
	on film_category.category_id = category.category_id
group by category.category_id, category.name
order by avg_running_time desc;


-- 6. Display the top 10 most frequently rented movies in descending order.
select film.title as film_name, film.film_id,
count(*) as top_10_rented
from film
inner join inventory
	on film.film_id = inventory.film_id
inner join rental
	on inventory.inventory_id = rental.inventory_id
group by film.title, film.film_id
order by top_10_rented desc
limit 10;


-- 7.Determine if "Academy Dinosaur" can be rented from Store 1.
select film.title as film_name, store.store_id,
case when film.title like 'Academy Dinosaur' then 'Yes' else 'No'
end as can_be_rented
from film
inner join inventory
	on film.film_id = inventory.film_id
inner join store
	on inventory.store_id = store.store_id
where film.title = 'Academy Dinosaur' and store.store_id = 1;


-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. 
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."

select film.title as film_name,
ifnull(case when count(inventory.film_id) > 0 then 'Available' else 'Not Available' end, 'Not Available')
as availability_status
from film
left join inventory
	on film.film_id = inventory.film_id
group by film.title;


